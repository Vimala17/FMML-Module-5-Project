{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Vimala17/FMML-Module-5-Project/blob/main/FMML_M7_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O6WbuhKIaj8v"
      },
      "source": [
        "#Module 7 Project: Movie Recommendation Engine"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "`Module Coordinator: Ganesh Chandan`"
      ],
      "metadata": {
        "id": "nY0Fv5ynQ03G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this module, we will try to create a Movie Recommendation System using different unsupervised learning techniques."
      ],
      "metadata": {
        "id": "yb8Th0QVRLWU"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZMBdXlbjbEf4",
        "outputId": "ab3c97fe-acd0-4656-bf84-1856b739ced9"
      },
      "source": [
        "# dataset download\n",
        "\n",
        "# !wget https://files.grouplens.org/datasets/movielens/ml-100k.zip\n",
        "!wget https://files.grouplens.org/datasets/movielens/ml-latest-small.zip\n",
        "!unzip ml-latest-small.zip"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-01-24 14:27:58--  https://files.grouplens.org/datasets/movielens/ml-latest-small.zip\n",
            "Resolving files.grouplens.org (files.grouplens.org)... 128.101.65.152\n",
            "Connecting to files.grouplens.org (files.grouplens.org)|128.101.65.152|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 978202 (955K) [application/zip]\n",
            "Saving to: ‘ml-latest-small.zip’\n",
            "\n",
            "ml-latest-small.zip 100%[===================>] 955.28K  --.-KB/s    in 0.1s    \n",
            "\n",
            "2024-01-24 14:27:58 (8.24 MB/s) - ‘ml-latest-small.zip’ saved [978202/978202]\n",
            "\n",
            "Archive:  ml-latest-small.zip\n",
            "   creating: ml-latest-small/\n",
            "  inflating: ml-latest-small/links.csv  \n",
            "  inflating: ml-latest-small/tags.csv  \n",
            "  inflating: ml-latest-small/ratings.csv  \n",
            "  inflating: ml-latest-small/README.txt  \n",
            "  inflating: ml-latest-small/movies.csv  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZUjEAuW0eHbZ"
      },
      "source": [
        "## Clustering based recommendation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HtuurMa5aeiX"
      },
      "source": [
        "# Import Libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from scipy.sparse import csr_matrix\n",
        "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import itertools\n",
        "from sklearn.metrics import silhouette_samples, silhouette_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "iZ1H-jLmcT49",
        "outputId": "e311e16d-557d-4347-a0b5-3abe380940ff"
      },
      "source": [
        "# Import the Movies dataset\n",
        "movies = pd.read_csv('ml-latest-small/movies.csv')\n",
        "movies.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   movieId                               title  \\\n",
              "0        1                    Toy Story (1995)   \n",
              "1        2                      Jumanji (1995)   \n",
              "2        3             Grumpier Old Men (1995)   \n",
              "3        4            Waiting to Exhale (1995)   \n",
              "4        5  Father of the Bride Part II (1995)   \n",
              "\n",
              "                                        genres  \n",
              "0  Adventure|Animation|Children|Comedy|Fantasy  \n",
              "1                   Adventure|Children|Fantasy  \n",
              "2                               Comedy|Romance  \n",
              "3                         Comedy|Drama|Romance  \n",
              "4                                       Comedy  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ec5f2f7-d9e5-49f6-b870-7db4960fd373\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Jumanji (1995)</td>\n",
              "      <td>Adventure|Children|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Grumpier Old Men (1995)</td>\n",
              "      <td>Comedy|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Waiting to Exhale (1995)</td>\n",
              "      <td>Comedy|Drama|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Father of the Bride Part II (1995)</td>\n",
              "      <td>Comedy</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ec5f2f7-d9e5-49f6-b870-7db4960fd373')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ec5f2f7-d9e5-49f6-b870-7db4960fd373 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ec5f2f7-d9e5-49f6-b870-7db4960fd373');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67de6805-f8b0-4824-828e-b1ffd0fb3bcd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67de6805-f8b0-4824-828e-b1ffd0fb3bcd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67de6805-f8b0-4824-828e-b1ffd0fb3bcd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5dBSzAp5cW5w",
        "outputId": "b6912f59-9de8-4331-b429-5344283d09c9"
      },
      "source": [
        "# Import the ratings dataset\n",
        "ratings = pd.read_csv('ml-latest-small/ratings.csv')\n",
        "ratings.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   userId  movieId  rating  timestamp\n",
              "0       1        1     4.0  964982703\n",
              "1       1        3     4.0  964981247\n",
              "2       1        6     4.0  964982224\n",
              "3       1       47     5.0  964983815\n",
              "4       1       50     5.0  964982931"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65459a8a-a5bc-4303-b28b-c04d3707459a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>userId</th>\n",
              "      <th>movieId</th>\n",
              "      <th>rating</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>964982703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>964981247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>4.0</td>\n",
              "      <td>964982224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>47</td>\n",
              "      <td>5.0</td>\n",
              "      <td>964983815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>50</td>\n",
              "      <td>5.0</td>\n",
              "      <td>964982931</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65459a8a-a5bc-4303-b28b-c04d3707459a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-65459a8a-a5bc-4303-b28b-c04d3707459a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-65459a8a-a5bc-4303-b28b-c04d3707459a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-23874e94-bef9-4dc4-9a7c-f8446511440b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23874e94-bef9-4dc4-9a7c-f8446511440b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-23874e94-bef9-4dc4-9a7c-f8446511440b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mRRxx1bVcZAr",
        "outputId": "ec285533-e1e0-465a-87df-bff3e9f60fdb"
      },
      "source": [
        "# Print the number of records and the total number of movies\n",
        "print('The dataset contains: ', len(ratings), ' ratings of ', len(movies), ' movies.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The dataset contains:  100836  ratings of  9742  movies.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ec8LbfpxcfyB"
      },
      "source": [
        "### Romance versus Science Fiction\n",
        "\n",
        "We will start by considering a subset of users and discovering what are their favourite genre. We will do this by defining a function that will calculate each user’s average rating for all science fiction and romance movies."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZEiAml47ca7O",
        "outputId": "c0d3f51d-a829-4c15-c72b-fe978f1cc242"
      },
      "source": [
        "# Function to get the genre ratings\n",
        "def get_genre_ratings(ratings, movies, genres, column_names):\n",
        "    genre_ratings = pd.DataFrame()\n",
        "    for genre in genres:\n",
        "        genre_movies = movies[movies['genres'].str.contains(genre) ]\n",
        "        avg_genre_votes_per_user = ratings[ratings['movieId'].isin(genre_movies['movieId'])].loc[:, ['userId', 'rating']].groupby(['userId'])['rating'].mean().round(2)\n",
        "\n",
        "        genre_ratings = pd.concat([genre_ratings, avg_genre_votes_per_user], axis=1)\n",
        "\n",
        "    genre_ratings.columns = column_names\n",
        "    return genre_ratings# Calculate the average rating of romance and scifi movies\n",
        "genre_ratings = get_genre_ratings(ratings, movies, ['Romance', 'Sci-Fi'], ['avg_romance_rating', 'avg_scifi_rating'])\n",
        "genre_ratings.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   avg_romance_rating  avg_scifi_rating\n",
              "1                4.31              4.22\n",
              "2                4.50              3.88\n",
              "3                0.50              4.20\n",
              "4                3.38              2.83\n",
              "5                3.09              2.50"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ddc0550-5261-4c7f-8626-388f68429189\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>avg_romance_rating</th>\n",
              "      <th>avg_scifi_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.31</td>\n",
              "      <td>4.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.50</td>\n",
              "      <td>3.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.50</td>\n",
              "      <td>4.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.38</td>\n",
              "      <td>2.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3.09</td>\n",
              "      <td>2.50</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ddc0550-5261-4c7f-8626-388f68429189')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5ddc0550-5261-4c7f-8626-388f68429189 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5ddc0550-5261-4c7f-8626-388f68429189');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-725d1635-958f-4a1c-a2f5-cc479ea98084\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-725d1635-958f-4a1c-a2f5-cc479ea98084')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-725d1635-958f-4a1c-a2f5-cc479ea98084 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "79b5Uz3KcmSu"
      },
      "source": [
        "In order to have a more delimited subset of people to study, we are going to bias our grouping to only get ratings from those users that like either romance or science fiction movies."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "AdiswAdbceds",
        "outputId": "87cbf8b6-3879-46d8-e710-40ed62a8be99"
      },
      "source": [
        "# Function to get the biased dataset\n",
        "def bias_genre_rating_dataset(genre_ratings, score_limit_1, score_limit_2):\n",
        "    biased_dataset =    genre_ratings[((genre_ratings['avg_romance_rating'] < score_limit_1 - 0.2) & (genre_ratings['avg_scifi_rating'] > score_limit_2)) | ((genre_ratings['avg_scifi_rating'] < score_limit_1) & (genre_ratings['avg_romance_rating'] > score_limit_2))]\n",
        "    biased_dataset = pd.concat([biased_dataset[:300], genre_ratings[:2]])\n",
        "    biased_dataset = pd.DataFrame(biased_dataset.to_records())\n",
        "    return biased_dataset\n",
        "\n",
        "# Bias the dataset\n",
        "biased_dataset = bias_genre_rating_dataset(genre_ratings, 3.2, 2.5)\n",
        "\n",
        "# Printing the resulting number of records & the head of the dataset\n",
        "print( \"Number of records: \", len(biased_dataset))\n",
        "biased_dataset.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of records:  162\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  avg_romance_rating  avg_scifi_rating\n",
              "0      3                0.50              4.20\n",
              "1      4                3.38              2.83\n",
              "2      5                3.09              2.50\n",
              "3      7                2.65              3.15\n",
              "4      9                3.17              3.00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07f11ca7-dfb0-4d65-bc22-cac533a7ac25\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>avg_romance_rating</th>\n",
              "      <th>avg_scifi_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>0.50</td>\n",
              "      <td>4.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>3.38</td>\n",
              "      <td>2.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>3.09</td>\n",
              "      <td>2.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>2.65</td>\n",
              "      <td>3.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>3.17</td>\n",
              "      <td>3.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07f11ca7-dfb0-4d65-bc22-cac533a7ac25')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-07f11ca7-dfb0-4d65-bc22-cac533a7ac25 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-07f11ca7-dfb0-4d65-bc22-cac533a7ac25');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2382ee42-73b0-4641-9047-adaaf0514948\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2382ee42-73b0-4641-9047-adaaf0514948')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2382ee42-73b0-4641-9047-adaaf0514948 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 701
        },
        "id": "MLCoVvz0ctAh",
        "outputId": "75e66c26-5829-4c3f-e3bc-684cd36d8872"
      },
      "source": [
        "# Defining the scatterplot drawing function\n",
        "def draw_scatterplot(x_data, x_label, y_data, y_label):\n",
        "    fig = plt.figure(figsize=(8,8))\n",
        "    ax = fig.add_subplot(111)\n",
        "    plt.xlim(0, 5)\n",
        "    plt.ylim(0, 5)\n",
        "    ax.set_xlabel(x_label)\n",
        "    ax.set_ylabel(y_label)\n",
        "    ax.scatter(x_data, y_data, s=30)\n",
        "\n",
        "# Plot the scatterplot\n",
        "draw_scatterplot(biased_dataset['avg_scifi_rating'],'Avg scifi rating', biased_dataset['avg_romance_rating'], 'Avg romance rating')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "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9XZA1z8AAIDZ4jrrv019fb127dolSRo0aJB69uwZzmkiQlAFAAAwW1zHqP7hD3/QkSNH1LNnT40YMUIjRoywJaQCAADA2SwH1ZkzZyorK0tFRUX6f//v/+n48eOxqAsAAABJznJQraqq0pIlS+RyuXTDDTeob9++mj59ut59991Y1AcAAIAkFfYYVUk6cuSIli1bpsWLF2vlypUaMGCAdu7cGc36AmKMKgAAgNkiyWupkTzwqaeeqiuvvFJ/+9vf9Pnnn+vTTz+N5HQAAABAO8td/1JrS+oLL7yg73//++rfv79KS0t13XXXacuWLZbOM3/+fI0ZM0YZGRnKysrStddeq23btoVTEgAAABzGclC98cYblZWVpZkzZ2rQoEFavXq1PvvsMz300EMaNmyYpXOtWbNG06dP1/r167VixQodO3ZMV1xxhRoaGqyWBQAAAIex3PXfrVs3vfjii7ryyivVrVu3Dsc2b96s888/P+Rzvf322x3+/dxzzykrK0sbN27UpZde2un+TU1Nampqav9325atAAAAcB7LLaptXf5tIbWurk6/+c1vdPHFF+vCCy+MqJja2lpJUq9evfwenz9/vjIzM9u/Bg4cGNHjAQAAwFxhz/pfu3atysrK9PLLL6tfv37653/+Z11//fUaM2ZMWIW0tLToBz/4gQ4fPqyKigq/9/HXojpw4EBm/QMAABgqbrP+q6ur9dxzz6msrExer1c33HCDmpqa9Oqrr2r48OGWHvhk06dP1+bNm7sMqZKUlpamtLS0iB4HAAAAiSHkrv+rr75aQ4cO1UcffaTS0lJ9+eWXevLJJ6NSxJ133qk33nhDq1at0oABA6JyTgAAACS2kFtU33rrLc2YMUO33367zjnnnKg8uM/n01133aVly5Zp9erVys3Njcp5AQD+NTQ1q6xitxa/t1c1dY3KynCrKD9HxQW5Sk+LaGltR9QDwCwht6hWVFSorq5Oo0aNUn5+vp566il99dVXET349OnT9Yc//EGLFy9WRkaGqqurVV1drb///e8RnRcA0FlDU7MmL1qn0pXbVe1tVItPqvY2qnTldk1etE4NTc1JXQ8A84QcVMeOHavf/va3qqqq0m233aYlS5aoX79+amlp0YoVK1RXV2f5wRcuXKja2lqNHz9effv2bf9aunSp5XMBAAIrq9itT6q8ajlpCm2LT/qk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kCTde++9evzxx7Vq1SoNHTpUixcvlsvl0m9/+1u53W4NHz5cX3zxhW699VZLzwEA/KFFFYAjbNu2Te+//75uuukmSVJqaqomT56ssrKy9n/fcMMNeuGFFyRJDQ0N+uMf/6gpU6ZIknbt2qVjx47p4osvbj9nZmZme1d6V2bNmqX/83/+jwoLC/XII49o586d7cfaWlRj7YILLugQUiVp48aNuvrqq5WTk6OMjAx997vfldQarK0aMWJE+/+7XC5lZ2e3DyPYtm2bRowYIbfb3X6fE19DAIgEQRWAI5SVlam5uVn9+vVTamqqUlNTtXDhQr388suqra2V1NpNX15erpqaGr366qs65ZRT9L3vfS+ix33wwQe1ZcsWTZo0Se+8846GDx+uZcuWSZJOOeWUiJ9XKNLT0zv8u6GhQVdeeaU8Ho9eeOEFbdiwob2mcCZbtQ1laONyudTS0hJ+wQAQIoIqgITX3Nys559/Xo8++qgqKyvbvz788EP169dP//M//yNJ+va3v62BAwdq6dKleuGFF/Qv//Iv7SFs0KBB6t69uzZs2NB+3traWm3fvj3o4+fl5WnmzJlavny5/vmf/1nPPvuspNaWyPLy8hg848C2bt2qQ4cO6ZFHHtF3vvMdDRs2rL0FtE1bC6y/8bJWDB06VB9//LGamprabzvxNQSASBBUASS8N954Q3/7299UXFys888/v8PX9ddf3979L7XO/v/1r3+tFStWtHf7S1JGRoamTp2qe+65R6tWrdKWLVtUXFyslJQUuVwuv4/797//XXfeeadWr16tzz//XH/5y1+0YcMGnXvuuZKk2bNna8OGDbrjjjv00UcfaevWrVq4cKG++uqrmL4eOTk56tGjh5588knt2rVLr732mh566KEO9znrrLPkcrn0xhtv6ODBgx0mmVlRVFSklpYW/du//Zs+/fRT/elPf9Ivf/lLSerydQOAUBFUASS8srIyFRYWKjMzs9Ox66+/Xh988IE++ugjSa3d/5988on69++vSy65pMN9H3vsMY0bN07/9E//pMLCQl1yySU699xzO4y/PFG3bt106NAh3XzzzcrLy9MNN9ygq666SnPnzpXU2tK6fPlyffjhh7r44os1btw4/fGPf1Rqamznsfbu3VvPPfec/vd//1fDhw/XI4880h4e2/Tv319z587Vfffdpz59+ujOO+8M67E8Ho9ef/11VVZWauTIkfrZz36m+++/X5K6fN0AIFTsTAUAXWhoaFD//v316KOPqri42O5yEsYLL7ygW265RbW1tXEbpwvAmVieCgD+4a9//au2bt2qiy++WLW1tfqv//ovSdI111xjc2Vme/755zVo0CD1799fH374oe69917dcMMNhFQAESOoAsAJfvnLX2rbtm3q0aOHRo0apT//+c8688wz7S7LaNXV1br//vtVXV2tvn376l/+5V/08MMP210WAAeg6x8AAABGYjIVAAAAjERQBQAAgJEIqgAAADASQRUAAABGIqgCAADASARVAAAAGImgCgAAACMRVAEAAGCk/x8sjCZimaBQUAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "id": "LRfknsM1c1Ur",
        "outputId": "3aa74a83-b7c4-4f71-a45d-655714a0adcc"
      },
      "source": [
        "# Let's turn our dataset into a list\n",
        "X = biased_dataset[['avg_scifi_rating','avg_romance_rating']].values\n",
        "\n",
        "# Import KMeans\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Create an instance of KMeans to find two clusters\n",
        "kmeans_1 = KMeans(n_clusters=2)\n",
        "\n",
        "# Use fit_predict to cluster the dataset\n",
        "predictions = kmeans_1.fit_predict(X)\n",
        "\n",
        "# Defining the cluster plotting function\n",
        "def draw_clusters(biased_dataset, predictions, cmap='viridis'):\n",
        "    fig = plt.figure(figsize=(8,8))\n",
        "    ax = fig.add_subplot(111)\n",
        "    plt.xlim(0, 5)\n",
        "    plt.ylim(0, 5)\n",
        "    ax.set_xlabel('Avg scifi rating')\n",
        "    ax.set_ylabel('Avg romance rating')\n",
        "    clustered = pd.concat([biased_dataset.reset_index(), pd.DataFrame({'group':predictions})], axis=1)\n",
        "    plt.scatter(clustered['avg_scifi_rating'], clustered['avg_romance_rating'], c=clustered['group'], s=20, cmap=cmap)\n",
        "\n",
        "# Plot\n",
        "draw_clusters(biased_dataset, predictions)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "id": "4tVnggzlc-rg",
        "outputId": "478fb1b5-b4c7-4079-cc34-3543d94f593e"
      },
      "source": [
        "# Create an instance of KMeans to find three clusters\n",
        "kmeans_2 = KMeans(n_clusters=3)\n",
        "# Use fit_predict to cluster the dataset\n",
        "predictions_2 = kmeans_2.fit_predict(X)\n",
        "# Plot\n",
        "draw_clusters(biased_dataset, predictions_2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xi5ObyC0dLle"
      },
      "source": [
        "It is evident now that the science-fiction rating has started to come into play:\n",
        "\n",
        "    People who like sci-fi and romance modeately belong to the green group.\n",
        "    People who like scifi but not romance belong to the yello group.\n",
        "    People who like romance but not sci-fi belong to the purple group."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p5w_-jzld_rM"
      },
      "source": [
        "Finding optimal clusters using silhouette score"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "HyzcralUdFxj",
        "outputId": "ee5c0575-699c-4749-e25e-8eaba1831339"
      },
      "source": [
        "# Selecting our dataset to study\n",
        "df = biased_dataset[['avg_scifi_rating','avg_romance_rating']]\n",
        "\n",
        "# Choose the range of k values to test.\n",
        "# We added a stride of 5 to improve performance. We don't need to calculate the error for every k value\n",
        "possible_k_values = range(2, len(X)+1, 5)\n",
        "\n",
        "# Define function to calculate the clustering errors\n",
        "def clustering_errors(k, data):\n",
        "    kmeans = KMeans(n_clusters=k).fit(data)\n",
        "    predictions = kmeans.predict(data)\n",
        "    #cluster_centers = kmeans.cluster_centers_\n",
        "    # errors = [mean_squared_error(row, cluster_centers[cluster]) for row, cluster in zip(data.values, predictions)]\n",
        "    # return sum(errors)\n",
        "    silhouette_avg = silhouette_score(data, predictions)\n",
        "    return silhouette_avg\n",
        "\n",
        "# Calculate error values for all k values we're interested in\n",
        "errors_per_k = [clustering_errors(k, X) for k in possible_k_values]\n",
        "\n",
        "# Plot the each value of K vs. the silhouette score at that value\n",
        "fig, ax = plt.subplots(figsize=(16, 6))\n",
        "plt.plot(possible_k_values, errors_per_k)\n",
        "\n",
        "# Ticks and grid\n",
        "xticks = np.arange(min(possible_k_values), max(possible_k_values)+1, 5.0)\n",
        "ax.set_xticks(xticks, minor=False)\n",
        "ax.set_xticks(xticks, minor=True)\n",
        "ax.xaxis.grid(True, which='both')\n",
        "yticks = np.arange(round(min(errors_per_k), 2), max(errors_per_k), .05)\n",
        "ax.set_yticks(yticks, minor=False)\n",
        "ax.set_yticks(yticks, minor=True)\n",
        "ax.yaxis.grid(True, which='both')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-11-ea56d5ac5a15>:10: ConvergenceWarning: Number of distinct clusters (157) found smaller than n_clusters (162). Possibly due to duplicate points in X.\n",
            "  kmeans = KMeans(n_clusters=k).fit(data)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j02Q87YjepyP"
      },
      "source": [
        "We will chose the K = 7 as it is the one that yields the best score and will be easier to visualize.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lV1yJyAbeWHC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "outputId": "5d02ee72-754b-4227-b6ad-ed79cb1b6e9e"
      },
      "source": [
        "# Create an instance of KMeans to find seven clusters\n",
        "kmeans_4 = KMeans(n_clusters=7)\n",
        "# Use fit_predict to cluster the dataset\n",
        "predictions_4 = kmeans_4.fit_predict(X)\n",
        "# Plot\n",
        "draw_clusters(biased_dataset, predictions_4, cmap='Accent')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bqqi2h3FfaXs"
      },
      "source": [
        "Up to now, we have only analyzed romance and science-fiction movies. Let us see what happens when adding other genre to our analysis by adding Action movies."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wv4ykXxweyrf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "800ede3e-3be1-4665-e62e-2afed68207f7"
      },
      "source": [
        "# Select our biased dataset and add action genre\n",
        "biased_dataset_3_genres = get_genre_ratings(ratings, movies, ['Romance','Sci-Fi', 'Action'],\n",
        "['avg_romance_rating', 'avg_scifi_rating', 'avg_action_rating'])\n",
        "# Drop null values\n",
        "biased_dataset_3_genres = bias_genre_rating_dataset(biased_dataset_3_genres, 3.2, 2.5).dropna()\n",
        "# Print the number of records and the head of our dataset\n",
        "print( \"Number of records: \", len(biased_dataset_3_genres))\n",
        "biased_dataset_3_genres.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of records:  161\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  avg_romance_rating  avg_scifi_rating  avg_action_rating\n",
              "0      3                0.50              4.20               3.57\n",
              "1      4                3.38              2.83               3.32\n",
              "2      5                3.09              2.50               3.11\n",
              "3      7                2.65              3.15               3.26\n",
              "4      9                3.17              3.00               3.12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7ae2426-aff3-47b2-bde2-21e5243fb5ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>avg_romance_rating</th>\n",
              "      <th>avg_scifi_rating</th>\n",
              "      <th>avg_action_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>0.50</td>\n",
              "      <td>4.20</td>\n",
              "      <td>3.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>3.38</td>\n",
              "      <td>2.83</td>\n",
              "      <td>3.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>3.09</td>\n",
              "      <td>2.50</td>\n",
              "      <td>3.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>2.65</td>\n",
              "      <td>3.15</td>\n",
              "      <td>3.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>3.17</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3.12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7ae2426-aff3-47b2-bde2-21e5243fb5ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a7ae2426-aff3-47b2-bde2-21e5243fb5ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a7ae2426-aff3-47b2-bde2-21e5243fb5ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-daeb27d9-b2e6-43b9-86bd-3035eb04ce44\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-daeb27d9-b2e6-43b9-86bd-3035eb04ce44')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-daeb27d9-b2e6-43b9-86bd-3035eb04ce44 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bmxE7OEbfjgH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "outputId": "ccfedad8-ab31-46f9-a954-4c1fe8d471dc"
      },
      "source": [
        "# Turn dataset into a list\n",
        "X_with_action = biased_dataset_3_genres[['avg_scifi_rating','avg_romance_rating','avg_action_rating']].values# Create an instance of KMeans to find seven clusters\n",
        "kmeans_5 = KMeans(n_clusters=7)\n",
        "# Use fit_predict to cluster the dataset\n",
        "predictions_5 = kmeans_5.fit_predict(X_with_action)\n",
        "# Define 3d plotting function\n",
        "def draw_clusters_3d(biased_dataset_3, predictions):\n",
        "    fig = plt.figure(figsize=(8,8))\n",
        "    ax = fig.add_subplot(111)\n",
        "    plt.xlim(0, 5)\n",
        "    plt.ylim(0, 5)\n",
        "    ax.set_xlabel('Avg scifi rating')\n",
        "    ax.set_ylabel('Avg romance rating')\n",
        "    clustered = pd.concat([biased_dataset_3.reset_index(), pd.DataFrame({'group':predictions})], axis=1)\n",
        "    colors = itertools.cycle(plt.rcParams[\"axes.prop_cycle\"].by_key()[\"color\"])\n",
        "    for g in clustered.group.unique():\n",
        "        color = next(colors)\n",
        "        for index, point in clustered[clustered.group == g].iterrows():\n",
        "            if point['avg_action_rating'].astype(float) > 3:\n",
        "                size = 50\n",
        "            else:\n",
        "                size = 15\n",
        "            plt.scatter(point['avg_scifi_rating'],\n",
        "                        point['avg_romance_rating'],\n",
        "                        s=size,\n",
        "                        color=color)# Plot\n",
        "draw_clusters_3d(biased_dataset_3_genres, predictions_5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "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mkcGrRpxLaygmpycrIKCAvmCne8MAADggJod5ap8Z4+8mw5LliRDSht6kjLP76vUftlOl4d2CLtH9b/+67/0n//5nyorK4tGPQAAAGGrWrNXh/7wkbyflNkhVZIsyftJmQ794SNVrdnnaH1on7B7VJ944glt27ZNffr0UWFhobp27dro68XFxRErDgAAoC01O8p1ZMln9oOmR94ef3xkyTYl90pnZDXOhB1Up0yZEoUyAAAA2qfynT32SQxNQ2pDpqHKVXsIqnEm7KB67733RqMOAACAsFm1vhM9qcH4LXk3HpZV62OBVRwJu0cVAADALfxeX9shNcA6fj/iBkEVAADELTPNIxkh3mwcvx9xg6AKAADilpHsUdrQk+we1WBMQ2nDTmLaP84QVAEAQFzLPL9v8IVUkuS3lHle39gUhIghqAIAgLiW2i9b3aYMtB80HVk9/rjblIGs+I9DYa/6nzt3bovXDcNQWlqaBg4cqK9//evKycnpcHEAAAChyBjbW8m90lW5ao+8GxueTJWjzPM4mSpeGZZlhbpWTpI0YcIEFRcXy+fzqaioSJK0detWeTweDRkyRFu2bJFhGFq1apWGDh0alaIDKioqlJ2drfLycmVlZUX1tQAAQHywan3ye30y0zz0pLpAR/Ja2FP/X//61zV58mTt3btX69at07p16/TFF1/ooosu0rXXXqs9e/boggsu0B133BHuUwMAAHSYkeyRJzOFkJoAwh5R7du3r958881mo6UbN27UxRdfrD179qi4uFgXX3yxSktLI1psU4yoAgAAuFtMR1TLy8t18ODBZtcPHTqkiooKSVK3bt107NixcJ8aAAAAqNeuqf+bb75Zr7zyir744gt98cUXeuWVVzRz5kxNmTJFkvT+++9r8ODBka4VAAAAnUjYU/9VVVW64447tGDBAtXV1UmSkpKSNH36dD322GPq2rWrSkpKJEkjR46MdL2NMPUPAADgbh3Ja2EH1YCqqip9/vnnkqQBAwYoIyOjPU/TIQRVAAAAd4tpj+r//M//qLq6WhkZGTr99NN1+umnOxJSAQAAkNjCDqp33HGH8vLydN111+kf//iHfD5fNOoCAABAJxd2UN23b58WLVokwzB09dVXq3fv3pozZ47ee++9aNQHAACATqrdPaqSVF1drVdeeUUvvPCC3nrrLZ188sn67LPPIllf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6U6XgigbNmyY9u3bV/+xatWqsL4/brenOvvsszVmzBg98cQTkuwTrfLz83XbbbfpzjvvdLg6RIthGHrllVc0ZcoUp0tBjBw6dEh5eXlauXKlLrjgAqfLQQzk5OTol7/8pWbOnOl0KYiCqqoqjRo1Sr///e/14IMPauTIkXr88cedLgtRcN9992nJkiUqKSlp93PE5YjqsWPHtG7dOk2ePLn+mmmamjx5slavXu1gZQAirby8XJIdXpDYfD6fFi1apKNHj3KMdgKbM2eOrrjiikb/hiNxffrpp+rTp48GDBig66+/Xrt27Qrr+x0/mao9SktL5fP5mp1e1bNnT23evNmhqgBEmt/v1w9+8AOde+65Gj58uNPlIEo+/vhjjRs3Tl6vVxkZGXrllVc0dOhQp8tCFCxatEjFxcVau3at06UgBs4++2zNnz9fRUVF2rdvn+6//36df/752rBhgzIzM0N6jrgMqgA6hzlz5mjDhg1h9zQhvhQVFamkpETl5eX6v//7P02fPl0rV64krCaY3bt36/vf/77efPNNpaWlOV0OYuCyyy6r//Xpp5+us88+W4WFhXrppZdCbu2Jy6Cam5srj8ejAwcONLp+4MAB9erVy6GqAETSrbfeqldffVVvv/22Tj75ZKfLQRSlpKRo4MCBkqTRo0dr7dq1+s1vfqOnnnrK4coQSevWrdPBgwc1atSo+ms+n09vv/22nnjiCdXU1Mjj8ThYIaKtW7duGjx4sLZt2xby98Rlj2pKSopGjx6tpUuX1l/z+/1aunQpfU1AnLMsS7feeqteeeUVLVu2TP3793e6JMSY3+9XTU2N02UgwiZNmqSPP/5YJSUl9R9nnnmmrr/+epWUlBBSO4Gqqip99tln6t27d8jfE5cjqpI0d+5cTZ8+XWeeeabOOussPf744zp69Khuuukmp0tDhFVVVTX6r6/t27erpKREOTk5KigocLAyRMOcOXP0wgsv6K9//asyMzO1f/9+SVJ2dra6dOnicHWItLvuukuXXXaZCgoKVFlZqRdeeEErVqzQP//5T6dLQ4RlZmY26zXv2rWrTjrpJHrQE9SPfvQjXXnllSosLNTevXt17733yuPx6Nprrw35OeI2qE6dOlWHDh3SPffco/3792vkyJF64403mi2wQvz74IMPNGHChPrHc+fOlSRNnz5d8+fPd6gqRMu8efMkSRdeeGGj688995xmzJgR+4IQVQcPHtS0adO0b98+ZWdn6/TTT9c///lPXXTRRU6XBqCDvvjiC1177bU6fPiwevToofPOO09r1qxRjx49Qn6OuN1HFQAAAIktLntUAQAAkPgIqgAAAHAlgioAAABciaAKAAAAVyKoAgAAwJUIqgAAAHAlgioAAABciaAKAAAAVyKoAoBDLrzwQv3gBz+of1xdXa2rrrpKWVlZMgxDR44cUb9+/fT44487VhMAOImTqQAklNWrV+u8887TpZdeqtdee83pcoIqKytTcnKyMjMzJdnHx957771atmyZcnNz1bNnT5WWlqpr165KT0+P6GuvWLFCEyZM0Jdffqlu3bq1WhMAOIkRVQAJ5ZlnntFtt92mt99+W3v37nW6nKBycnIaBcLPPvtMp556qoYPH65evXrJMAz16NEjrJB67NixiNYEAE4iqAJIGFVVVVq8eLFmz56tK664QvPnz6//2nXXXaepU6c2ur+2tla5ublasGCBJKmyslLXX3+9unbtqt69e+uxxx5rcyp8/fr1mjBhgjIzM5WVlaXRo0frgw8+qP/6u+++qwsvvFDp6enq3r27LrnkEn355ZeSGk+zX3jhhXr00Uf19ttvyzAMXXjhhZLU5tT/jBkzNGXKFD300EPq06ePioqKJEkLFy7UmWeeqczMTPXq1UvXXXedDh48KEnasWOHJkyYIEnq3r27DMPQjBkzmtUUeP2f//znuvnmm5WZmamCggL98Y9/bFTDe++9p5EjRyotLU1nnnmmlixZIsMwVFJS0mrdABAKgiqAhPHSSy9pyJAhKioq0g033KBnn31Wge6m66+/Xn//+99VVVVVf/8///lPVVdX6xvf+IYkae7cuXr33Xf1t7/9TW+++abeeecdFRcXB33N66+/XieffLLWrl2rdevW6c4771RycrIkqaSkRJMmTdLQoUO1evVqrVq1SldeeaV8Pl+z53n55Zc1a9YsjRs3Tvv27dPLL78c8s+9dOlSbdmyRW+++aZeffVVSXYIf+CBB7R+/XotWbJEO3bsqA+j+fn5+stf/iJJ2rJli/bt26ff/OY3rT7/o48+qjPPPFMffvihbrnlFs2ePVtbtmyRJFVUVOjKK6/UaaedpuLiYj3wwAP6yU9+EnLtABBMktMFAECkPPPMM7rhhhskSZdeeqnKy8u1cuVKXXjhhbrkkkvUtWtXvfLKK7rxxhslSS+88IK+9rWvKTMzU5WVlfrzn/+sF154QZMmTZIkPffcc+rTp0/Q19y1a5d+/OMfa8iQIZKkQYMG1X/tv//7v3XmmWfq97//ff21YcOGtfg8OTk5Sk9PV0pKinr16hXWz921a1c9/fTTSklJqb9288031/96wIAB+u1vf6sxY8aoqqpKGRkZysnJkSTl5eU16lFtyeWXX65bbrlFkvSTn/xEjz32mJYvX66ioiK98MILMgxDf/rTn5SWlqahQ4dqz549mjVrVlg/AwC0hBFVAAlhy5Ytev/993XttddKkpKSkjR16lQ988wz9Y+vvvpqPf/885Kko0eP6q9//auuv/56SdLnn3+u2tpanXXWWfXPmZ2dXT+V3pq5c+fq29/+tiZPnqxHHnlEn332Wf3XAiOq0Xbaaac1CqmStG7dOl155ZUqKChQZmamxo8fL8kO1uE6/fTT639tGIZ69epV30awZcsWnX766UpLS6u/p+F7CAAdQVAFkBCeeeYZ1dXVqU+fPkpKSlJSUpLmzZunv/zlLyovL5dkT9MvXbpUBw8e1JIlS9SlSxddeumlHXrd++67Txs3btQVV1yhZcuWaejQoXrllVckSV26dOnwzxWKrl27Nnp89OhRXXLJJcrKytLzzz+vtWvX1tfUnsVWgVaGAMMw5Pf7218wAISIoAog7tXV1WnBggV69NFHVVJSUv+xfv169enTRy+++KIk6ZxzzlF+fr4WL16s559/Xt/61rfqQ9iAAQOUnJystWvX1j9veXm5tm7d2ubrDx48WHfccYf+9a9/6Zvf/Kaee+45SfZI5NKlS6PwEwe3efNmHT58WI888ojOP/98DRkypH4ENCAwAttSv2w4ioqK9PHHH6umpqb+WsP3EAA6gqAKIO69+uqr+vLLLzVz5kwNHz680cdVV11VP/0v2av///CHP+jNN9+sn/aXpMzMTE2fPl0//vGPtXz5cm3cuFEzZ86UaZoyDKPF1/3qq6906623asWKFdq5c6feffddrV27Vqeeeqok6a677tLatWt1yy236KOPPtLmzZs1b948lZaWRvX9KCgoUEpKin73u9/p888/19/+9jc98MADje4pLCyUYRh69dVXdejQoUaLzMJx3XXXye/36zvf+Y4++eQT/fOf/9SvfvUrSWr1fQOAUBFUAcS9Z555RpMnT1Z2dnazr1111VX64IMP9NFHH0myp/83bdqkvn376txzz210769//WuNGzdO//Ef/6HJkyfr3HPP1amnntqo/7Ihj8ejw4cPa9q0aRo8eLCuvvpqXXbZZbr//vsl2SOt//rXv7R+/XqdddZZGjdunP76178qKSm661h79Oih+fPn63//9381dOhQPfLII/XhMaBv3766//77deedd6pnz5669dZb2/VaWVlZ+vvf/66SkhKNHDlS//Vf/6V77rlHklp93wAgVJxMBQCtOHr0qPr27atHH31UM2fOdLqcuPH888/rpptuUnl5ecz6dAEkJranAoDjPvzwQ23evFlnnXWWysvL9bOf/UyS9PWvf93hytxtwYIFGjBggPr27av169frJz/5ia6++mpCKoAOI6gCQAO/+tWvtGXLFqWkpGj06NF65513lJub63RZrrZ//37dc8892r9/v3r37q1vfetbeuihh5wuC0ACYOofAAAArsRiKgAAALgSQRUAAACuRFAFAACAKxFUAQAA4EoEVQAAALgSQRUAAACuRFAFAACAKxFUAQAA4Er/H7/bcd9xMDfoAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2Upy7G0Ta5MH"
      },
      "source": [
        "The size of the dots represent the ratings of the action movies."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 1\n",
        "\n",
        "## Instead of choosing a n_clusters as 7, play around with different k\n",
        "## Find the optimal no of clusters with 3 genre_ratings data we just created using silhouette score method"
      ],
      "metadata": {
        "id": "AbWq1zNn5gVH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# CODE# CODE\n",
        "\n",
        "# Selecting our dataset to study\n",
        "X_with_action = biased_dataset_3_genres[['avg_scifi_rating', 'avg_romance_rating', 'avg_action_rating']].values\n",
        "\n",
        "# Choose the range of k values to test\n",
        "possible_k_values = range(2, len(X_with_action) + 1, 5)\n",
        "\n",
        "# Define function to calculate the silhouette scores\n",
        "def silhouette_scores(k, data):\n",
        "    kmeans = KMeans(n_clusters=k).fit(data)\n",
        "    predictions = kmeans.predict(data)\n",
        "    silhouette_avg = silhouette_score(data, predictions)\n",
        "    return silhouette_avg\n",
        "\n",
        "# Calculate silhouette scores for all k values we're interested in\n",
        "silhouette_scores_per_k = [silhouette_scores(k, X_with_action) for k in possible_k_values]\n",
        "\n",
        "# Plot each value of K vs. the silhouette score at that value\n",
        "fig, ax = plt.subplots(figsize=(16, 6))\n",
        "plt.plot(possible_k_values, silhouette_scores_per_k)\n",
        "\n",
        "# Ticks and grid\n",
        "xticks = np.arange(min(possible_k_values), max(possible_k_values) + 1, 5.0)\n",
        "ax.set_xticks(xticks, minor=False)\n",
        "ax.set_xticks(xticks, minor=True)\n",
        "ax.xaxis.grid(True, which='both')\n",
        "yticks = np.arange(round(min(silhouette_scores_per_k), 2), max(silhouette_scores_per_k), 0.05)\n",
        "ax.set_yticks(yticks, minor=False)\n",
        "ax.set_yticks(yticks, minor=True)\n",
        "ax.yaxis.grid(True, which='both')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "DzocWXF85cdp",
        "outputId": "fed42faa-f5d1-48e6-db57-6c2916115ea3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gzfFJTMJbGCk"
      },
      "source": [
        "### Taking users into consideration"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JahmtB_0f5fd"
      },
      "source": [
        "Once we have seen and understood how the K-Means algorithm group the users by their movie genre preferences, we are going to take a bigger picture of the dataset and explore how users rate individual movies.\n",
        "\n",
        "To do so, we will subset the dataset by ‘userid’ vs ‘user rating’ as follows."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oy6yk-kxfuxC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "outputId": "cc01490f-64a0-40c7-da61-927789df513e"
      },
      "source": [
        "# Merge the two tables then pivot so we have Users X Movies dataframe\n",
        "ratings_title = pd.merge(ratings, movies[['movieId', 'title']], on='movieId' )\n",
        "user_movie_ratings = pd.pivot_table(ratings_title, index='userId', columns= 'title', values='rating')\n",
        "\n",
        "# Print he number of dimensions and a subset of the dataset\n",
        "print('dataset dimensions: ', user_movie_ratings.shape, '\\n\\nSubset example:')\n",
        "user_movie_ratings.iloc[:6, :10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dataset dimensions:  (610, 9719) \n",
            "\n",
            "Subset example:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title   '71 (2014)  'Hellboy': The Seeds of Creation (2004)  \\\n",
              "userId                                                        \n",
              "1              NaN                                      NaN   \n",
              "2              NaN                                      NaN   \n",
              "3              NaN                                      NaN   \n",
              "4              NaN                                      NaN   \n",
              "5              NaN                                      NaN   \n",
              "6              NaN                                      NaN   \n",
              "\n",
              "title   'Round Midnight (1986)  'Salem's Lot (2004)  \\\n",
              "userId                                                \n",
              "1                          NaN                  NaN   \n",
              "2                          NaN                  NaN   \n",
              "3                          NaN                  NaN   \n",
              "4                          NaN                  NaN   \n",
              "5                          NaN                  NaN   \n",
              "6                          NaN                  NaN   \n",
              "\n",
              "title   'Til There Was You (1997)  'Tis the Season for Love (2015)  \\\n",
              "userId                                                               \n",
              "1                             NaN                              NaN   \n",
              "2                             NaN                              NaN   \n",
              "3                             NaN                              NaN   \n",
              "4                             NaN                              NaN   \n",
              "5                             NaN                              NaN   \n",
              "6                             NaN                              NaN   \n",
              "\n",
              "title   'burbs, The (1989)  'night Mother (1986)  (500) Days of Summer (2009)  \\\n",
              "userId                                                                          \n",
              "1                      NaN                   NaN                          NaN   \n",
              "2                      NaN                   NaN                          NaN   \n",
              "3                      NaN                   NaN                          NaN   \n",
              "4                      NaN                   NaN                          NaN   \n",
              "5                      NaN                   NaN                          NaN   \n",
              "6                      NaN                   NaN                          NaN   \n",
              "\n",
              "title   *batteries not included (1987)  \n",
              "userId                                  \n",
              "1                                  NaN  \n",
              "2                                  NaN  \n",
              "3                                  NaN  \n",
              "4                                  NaN  \n",
              "5                                  NaN  \n",
              "6                                  NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f695a3e-86d6-49e5-95cb-7aa5e619bf8b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>title</th>\n",
              "      <th>'71 (2014)</th>\n",
              "      <th>'Hellboy': The Seeds of Creation (2004)</th>\n",
              "      <th>'Round Midnight (1986)</th>\n",
              "      <th>'Salem's Lot (2004)</th>\n",
              "      <th>'Til There Was You (1997)</th>\n",
              "      <th>'Tis the Season for Love (2015)</th>\n",
              "      <th>'burbs, The (1989)</th>\n",
              "      <th>'night Mother (1986)</th>\n",
              "      <th>(500) Days of Summer (2009)</th>\n",
              "      <th>*batteries not included (1987)</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>userId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f695a3e-86d6-49e5-95cb-7aa5e619bf8b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f695a3e-86d6-49e5-95cb-7aa5e619bf8b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f695a3e-86d6-49e5-95cb-7aa5e619bf8b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3e0d97ca-83dd-4209-9a42-7cf702d8b3c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e0d97ca-83dd-4209-9a42-7cf702d8b3c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3e0d97ca-83dd-4209-9a42-7cf702d8b3c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iSB8eHPqf-Xc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ff8e536-8dea-484f-ee25-c6d829d4f729"
      },
      "source": [
        "\n",
        "import pandas as pd\n",
        "\n",
        "# Define Function to get the most rated movies\n",
        "def get_most_rated_movies(user_movie_ratings, max_number_of_movies):\n",
        "    # 1- Count ratings for each movie\n",
        "    user_movie_ratings.loc['count'] = user_movie_ratings.count()\n",
        "\n",
        "    # 2- Sort movies based on number of ratings\n",
        "    user_movie_ratings_sorted = user_movie_ratings.sort_values(by='count', axis=1, ascending=False)\n",
        "\n",
        "    # 3- Remove the count row after sorting\n",
        "    user_movie_ratings_sorted = user_movie_ratings_sorted.drop(index='count')\n",
        "\n",
        "    # 4- Select the top 'max_number_of_movies' columns (movies)\n",
        "    most_rated_movies = user_movie_ratings_sorted.iloc[:, :max_number_of_movies]\n",
        "\n",
        "    return most_rated_movies\n",
        "\n",
        "# Define function to get the users who rate the most movies\n",
        "def get_users_who_rate_the_most(most_rated_movies, n_users):\n",
        "    # 1- Count the number of ratings per user\n",
        "    most_rated_movies['num_ratings'] = most_rated_movies.notnull().sum(axis=1)\n",
        "\n",
        "    # 2- Sort users based on the number of ratings\n",
        "    most_rated_movies = most_rated_movies.sort_values(by='num_ratings', ascending=False)\n",
        "\n",
        "    # 3- Select the top 'n_users'\n",
        "    most_rated_movies = most_rated_movies.iloc[:n_users, :]\n",
        "\n",
        "    # 4- Drop the 'num_ratings' column before returning\n",
        "    most_rated_movies = most_rated_movies.drop(columns=['num_ratings'])\n",
        "\n",
        "    return most_rated_movies\n",
        "\n",
        "# Define the sorting by rating function\n",
        "def sort_by_rating_density(user_movie_ratings, n_movies, n_users):\n",
        "    most_rated_movies = get_most_rated_movies(user_movie_ratings, n_movies)\n",
        "    most_rated_movies = get_users_who_rate_the_most(most_rated_movies, n_users)\n",
        "    return most_rated_movies\n",
        "\n",
        "# Example DataFrame (replace with actual data)\n",
        "data = {\n",
        "    'Movie1': [5, 4, None, 3, 2, None, 5],\n",
        "    'Movie2': [None, 3, 5, 4, None, 2, 1],\n",
        "    'Movie3': [2, None, None, 5, 3, 4, 5],\n",
        "    'Movie4': [3, 4, 2, None, 5, None, 4],\n",
        "    'Movie5': [None, 5, 4, 3, None, 2, 1],\n",
        "}\n",
        "\n",
        "# Create DataFrame\n",
        "user_movie_ratings = pd.DataFrame(data)\n",
        "\n",
        "# Choose number of movies and users\n",
        "n_movies = 3\n",
        "n_users = 5\n",
        "\n",
        "# Get most rated movies by users\n",
        "most_rated_movies_users_selection = sort_by_rating_density(user_movie_ratings, n_movies, n_users)\n",
        "\n",
        "# Print the result\n",
        "print('Dataset dimensions:', most_rated_movies_users_selection.shape)\n",
        "print(most_rated_movies_users_selection.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset dimensions: (5, 3)\n",
            "   Movie1  Movie2  Movie3\n",
            "3     3.0     4.0     5.0\n",
            "6     5.0     1.0     5.0\n",
            "0     5.0     NaN     2.0\n",
            "1     4.0     3.0     NaN\n",
            "4     2.0     NaN     3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tMmuIqVxgGAN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 111
        },
        "outputId": "71601b96-4706-46f9-bade-46a4a77111e1"
      },
      "source": [
        "# Define the plotting heatmap function\n",
        "def draw_movies_heatmap(most_rated_movies_users_selection, axis_labels=True):\n",
        "\n",
        "    fig = plt.figure(figsize=(15,4))\n",
        "    ax = plt.gca()\n",
        "\n",
        "    # Draw heatmap\n",
        "    heatmap = ax.imshow(most_rated_movies_users_selection,  interpolation='nearest', vmin=0, vmax=5, aspect='auto')\n",
        "    if axis_labels:\n",
        "        ax.set_yticks(np.arange(most_rated_movies_users_selection.shape[0]) , minor=False)\n",
        "        ax.set_xticks(np.arange(most_rated_movies_users_selection.shape[1]) , minor=False)\n",
        "        ax.invert_yaxis()\n",
        "        ax.xaxis.tick_top()\n",
        "        labels = most_rated_movies_users_selection.columns.str[:40]\n",
        "        ax.set_xticklabels(labels, minor=False)\n",
        "        ax.set_yticklabels(most_rated_movies_users_selection.index, minor=False)\n",
        "        plt.setp(ax.get_xticklabels(), rotation=90)\n",
        "    else:\n",
        "        ax.get_xaxis().set_visible(False)\n",
        "        ax.get_yaxis().set_visible(False)\n",
        "\n",
        "    ax.grid(False)\n",
        "    ax.set_ylabel('User id')# Separate heatmap from color bar\n",
        "    divider = make_axes_locatable(ax)\n",
        "    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)# Color bar\n",
        "    cbar = fig.colorbar(heatmap, ticks=[5, 4, 3, 2, 1, 0], cax=cax)\n",
        "    cbar.ax.set_yticklabels(['5 stars', '4 stars','3 stars','2 stars','1 stars','0 stars'])\n",
        "    plt.show()# Print the heatmap\n",
        "draw_movies_heatmap(most_rated_movies_users_selection)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nTdEC1i5hS-M"
      },
      "source": [
        "# Pivot the dataset and choose the first 1000 movies\n",
        "user_movie_ratings =  pd.pivot_table(ratings_title, index='userId', columns= 'title', values='rating')\n",
        "most_rated_movies_1k = get_most_rated_movies(user_movie_ratings, 1000).replace(np.nan, 0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YMGpCM8SikyB"
      },
      "source": [
        "from scipy import sparse\n",
        "\n",
        "# Conversion to sparse csr matrix\n",
        "sparse_ratings = sparse.csr_matrix(most_rated_movies_1k.values)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5j6M6TL7j5B7"
      },
      "source": [
        "### Large Scale Clustering"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pcvHmGnZipva"
      },
      "source": [
        "# 20 clusters\n",
        "predictions = KMeans(n_clusters=20, algorithm='lloyd').fit_predict(sparse_ratings)#change algorithm to 'lloyd'\n",
        "# Select the mas number of users and movies heatmap cluster\n",
        "# Cluster and print some of them\n",
        "clustered = pd.concat([get_most_rated_movies(user_movie_ratings, 1000).reset_index(), pd.DataFrame({'group':predictions})], axis=1)\n",
        "# draw_movie_clusters(clustered, max_users, max_movies)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wr82U3hYo7gg"
      },
      "source": [
        "### Predictions and Recommendation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KSx-kAa2j9rJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 694
        },
        "outputId": "c135a07a-c783-4819-b89f-7edf168b445d"
      },
      "source": [
        "# Pick a cluster ID from the clusters above\n",
        "cluster_number = 11\n",
        "# Let's filter to only see the region of the dataset with the most number of values\n",
        "n_users = 75\n",
        "n_movies = 300\n",
        "cluster = clustered[clustered.group == cluster_number].drop(['group'], axis=1)# Remove 'index' from the drop list\n",
        "cluster = cluster.reset_index(drop=True) #Reset index and drop the old one\n",
        "print(cluster)\n",
        "# Sort and print the cluster\n",
        "cluster = sort_by_rating_density(cluster, n_movies, n_users)\n",
        "draw_movies_heatmap(cluster, axis_labels=False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   userId  Forrest Gump (1994)  Shawshank Redemption, The (1994)  \\\n",
            "0     318                  4.5                               4.0   \n",
            "1     610                  3.0                               3.0   \n",
            "\n",
            "   Pulp Fiction (1994)  Silence of the Lambs, The (1991)  Matrix, The (1999)  \\\n",
            "0                  4.5                               4.0                 3.5   \n",
            "1                  5.0                               4.5                 5.0   \n",
            "\n",
            "   Star Wars: Episode IV - A New Hope (1977)  Jurassic Park (1993)  \\\n",
            "0                                        3.0                   4.0   \n",
            "1                                        5.0                   5.0   \n",
            "\n",
            "   Braveheart (1995)  Terminator 2: Judgment Day (1991)  ...  \\\n",
            "0                NaN                                NaN  ...   \n",
            "1                4.5                                5.0  ...   \n",
            "\n",
            "   Scary Movie 2 (2001)  About Schmidt (2002)  21 Jump Street (2012)  \\\n",
            "0                   NaN                   NaN                    4.0   \n",
            "1                   2.5                   NaN                    NaN   \n",
            "\n",
            "   Cider House Rules, The (1999)  Death Proof (2007)  Moonraker (1979)  \\\n",
            "0                            NaN                 NaN               NaN   \n",
            "1                            NaN                 3.5               NaN   \n",
            "\n",
            "   Virgin Suicides, The (1999)  ¡Three Amigos! (1986)  \\\n",
            "0                          NaN                    NaN   \n",
            "1                          NaN                    NaN   \n",
            "\n",
            "   Waking Ned Devine (a.k.a. Waking Ned) (1998)  Jacob's Ladder (1990)  \n",
            "0                                           NaN                    4.0  \n",
            "1                                           NaN                    NaN  \n",
            "\n",
            "[2 rows x 1001 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K1H3vAespxSf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed86f7fc-3ee2-40fd-f525-cea1e70c32ea"
      },
      "source": [
        "# Fill in the name of the column/movie. e.g. 'Forrest Gump (1994)'\n",
        "movie_name = \"Matrix, The (1999)\"\n",
        "cluster[movie_name].mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.25"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4eaBbILNpsWA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 780
        },
        "outputId": "6ff16764-6c3c-4a64-e6fe-3f9b84d70795"
      },
      "source": [
        "# The average rating of 20 movies as rated by the users in the cluster\n",
        "cluster.mean().head(20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "userId                                               464.00\n",
              "American Gangster (2007)                               3.75\n",
              "Despicable Me (2010)                                   3.75\n",
              "Pirates of the Caribbean: Dead Man's Chest (2006)      3.25\n",
              "Interstellar (2014)                                    4.25\n",
              "Unbreakable (2000)                                     4.25\n",
              "Sherlock Holmes: A Game of Shadows (2011)              3.50\n",
              "40-Year-Old Virgin, The (2005)                         4.00\n",
              "Lost in Translation (2003)                             4.50\n",
              "Lethal Weapon (1987)                                   4.25\n",
              "Zodiac (2007)                                          4.50\n",
              "Lucky Number Slevin (2006)                             3.50\n",
              "City of God (Cidade de Deus) (2002)                    4.50\n",
              "Dark Knight Rises, The (2012)                          3.75\n",
              "Hangover, The (2009)                                   3.75\n",
              "Life Aquatic with Steve Zissou, The (2004)             4.25\n",
              "Billy Elliot (2000)                                    4.25\n",
              "Bruce Almighty (2003)                                  3.25\n",
              "Harry Potter and the Goblet of Fire (2005)             3.25\n",
              "Slumdog Millionaire (2008)                             4.25\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>userId</th>\n",
              "      <td>464.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>American Gangster (2007)</th>\n",
              "      <td>3.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Despicable Me (2010)</th>\n",
              "      <td>3.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pirates of the Caribbean: Dead Man's Chest (2006)</th>\n",
              "      <td>3.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Interstellar (2014)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unbreakable (2000)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sherlock Holmes: A Game of Shadows (2011)</th>\n",
              "      <td>3.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40-Year-Old Virgin, The (2005)</th>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lost in Translation (2003)</th>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lethal Weapon (1987)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Zodiac (2007)</th>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lucky Number Slevin (2006)</th>\n",
              "      <td>3.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>City of God (Cidade de Deus) (2002)</th>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dark Knight Rises, The (2012)</th>\n",
              "      <td>3.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hangover, The (2009)</th>\n",
              "      <td>3.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Life Aquatic with Steve Zissou, The (2004)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Billy Elliot (2000)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bruce Almighty (2003)</th>\n",
              "      <td>3.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Harry Potter and the Goblet of Fire (2005)</th>\n",
              "      <td>3.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Slumdog Millionaire (2008)</th>\n",
              "      <td>4.25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cluster"
      ],
      "metadata": {
        "id": "9JPb15Qizy4Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "outputId": "790ea74a-e4aa-4420-d7bf-898ddeacd0ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   userId  American Gangster (2007)  Despicable Me (2010)  \\\n",
              "1     610                       3.5                   4.0   \n",
              "0     318                       4.0                   3.5   \n",
              "\n",
              "   Pirates of the Caribbean: Dead Man's Chest (2006)  Interstellar (2014)  \\\n",
              "1                                                3.5                  3.5   \n",
              "0                                                3.0                  5.0   \n",
              "\n",
              "   Unbreakable (2000)  Sherlock Holmes: A Game of Shadows (2011)  \\\n",
              "1                 4.5                                        3.5   \n",
              "0                 4.0                                        3.5   \n",
              "\n",
              "   40-Year-Old Virgin, The (2005)  Lost in Translation (2003)  \\\n",
              "1                             4.5                         5.0   \n",
              "0                             3.5                         4.0   \n",
              "\n",
              "   Lethal Weapon (1987)  ...  Tron (1982)  Scary Movie (2000)  \\\n",
              "1                   5.0  ...          NaN                 3.0   \n",
              "0                   3.5  ...          4.0                 NaN   \n",
              "\n",
              "   Black Hawk Down (2001)  Crash (2004)  The Imitation Game (2014)  \\\n",
              "1                     4.5           NaN                        NaN   \n",
              "0                     NaN           4.0                        3.5   \n",
              "\n",
              "   Skyfall (2012)  21 Jump Street (2012)  \\\n",
              "1             4.0                    NaN   \n",
              "0             NaN                    4.0   \n",
              "\n",
              "   Captain America: The First Avenger (2011)  Blow (2001)  \\\n",
              "1                                        NaN          NaN   \n",
              "0                                        3.5          4.0   \n",
              "\n",
              "   Princess Mononoke (Mononoke-hime) (1997)  \n",
              "1                                       NaN  \n",
              "0                                       4.0  \n",
              "\n",
              "[2 rows x 300 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed34248f-193c-403e-9491-4efd40d708ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>userId</th>\n",
              "      <th>American Gangster (2007)</th>\n",
              "      <th>Despicable Me (2010)</th>\n",
              "      <th>Pirates of the Caribbean: Dead Man's Chest (2006)</th>\n",
              "      <th>Interstellar (2014)</th>\n",
              "      <th>Unbreakable (2000)</th>\n",
              "      <th>Sherlock Holmes: A Game of Shadows (2011)</th>\n",
              "      <th>40-Year-Old Virgin, The (2005)</th>\n",
              "      <th>Lost in Translation (2003)</th>\n",
              "      <th>Lethal Weapon (1987)</th>\n",
              "      <th>...</th>\n",
              "      <th>Tron (1982)</th>\n",
              "      <th>Scary Movie (2000)</th>\n",
              "      <th>Black Hawk Down (2001)</th>\n",
              "      <th>Crash (2004)</th>\n",
              "      <th>The Imitation Game (2014)</th>\n",
              "      <th>Skyfall (2012)</th>\n",
              "      <th>21 Jump Street (2012)</th>\n",
              "      <th>Captain America: The First Avenger (2011)</th>\n",
              "      <th>Blow (2001)</th>\n",
              "      <th>Princess Mononoke (Mononoke-hime) (1997)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>610</td>\n",
              "      <td>3.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>3.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>318</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>...</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 300 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed34248f-193c-403e-9491-4efd40d708ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed34248f-193c-403e-9491-4efd40d708ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed34248f-193c-403e-9491-4efd40d708ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d44aaf60-efca-4aed-8dec-6769180de70e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d44aaf60-efca-4aed-8dec-6769180de70e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d44aaf60-efca-4aed-8dec-6769180de70e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1367ba84-fa39-4d76-b8c0-96b78e715669\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1367ba84-fa39-4d76-b8c0-96b78e715669 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4VKa3_ZiyeGg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ffbf951-837c-4c4d-b2fa-7c7dc5557167"
      },
      "source": [
        "\n",
        "# Predict for a specific user\n",
        "\n",
        "# Pick a user ID from the dataset\n",
        "user_id = 7\n",
        "# Check if the user_id exists in the index\n",
        "if user_id in cluster.index:\n",
        "    # Get all this user's ratings\n",
        "    user_2_ratings = cluster.loc[user_id, :]\n",
        "    # Which movies did they not rate?\n",
        "    user_2_unrated_movies = user_2_ratings[user_2_ratings.isnull()]\n",
        "    # What are the ratings of these movies the user did not rate?\n",
        "    avg_ratings = pd.concat([user_2_unrated_movies, cluster.mean()], axis=1, join='inner').loc[:, 0]\n",
        "    # Let's sort by rating so the highest rated movies are presented first\n",
        "    print(avg_ratings.sort_values(ascending=False)[:20])\n",
        "else:\n",
        "    print(f\"User ID {user_id} not found in the cluster.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User ID 7 not found in the cluster.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w4SISKyey5rb"
      },
      "source": [
        "## Using Collaborative Filtering (With fast.ai)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Eh_wLcmh4nFi",
        "outputId": "c0bca2f8-9dd7-4744-b6a2-afae6d5d7e87",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "! [ -e /content ] && pip install -Uqq fastai"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m109.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m68.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m58.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m87.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_GQhuh1QzBO-"
      },
      "source": [
        "from fastai.tabular.all import *\n",
        "from fastai.collab import *"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_C6VqNfy5KGG"
      },
      "source": [
        "### Training a model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vVnoQsA25KGH"
      },
      "source": [
        "For this, we will use the [Movielens 100k data dataset](https://grouplens.org/datasets/movielens/100k/). We can download it easily and decompress it with the following function:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WSpPNWVo5KGI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "b5c6d19d-0159-4786-fd84-f161ec73f4dd"
      },
      "source": [
        "path = untar_data(URLs.ML_100k)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
              "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <div>\n",
              "      <progress value='4931584' class='' max='4924029' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
              "      100.15% [4931584/4924029 00:00&lt;00:00]\n",
              "    </div>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ryXnRG55KGJ"
      },
      "source": [
        "The main table is in `u.data`. Since it's not a proper csv, we have to specify a few things while opening it: the tab delimiter, the columns we want to keep and their names."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9aIeuyeJ5KGL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "27f84bb2-ef2e-4470-94f2-0d6f127c62c6"
      },
      "source": [
        "ratings = pd.read_csv(path/'u.data', delimiter='\\t', header=None,\n",
        "                      usecols=(0,1,2), names=['user','movie','rating'])\n",
        "ratings.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user  movie  rating\n",
              "0   196    242       3\n",
              "1   186    302       3\n",
              "2    22    377       1\n",
              "3   244     51       2\n",
              "4   166    346       1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-60af9a93-3e56-43b9-9608-ae30b51f3732\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user</th>\n",
              "      <th>movie</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>196</td>\n",
              "      <td>242</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>186</td>\n",
              "      <td>302</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>22</td>\n",
              "      <td>377</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>244</td>\n",
              "      <td>51</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>166</td>\n",
              "      <td>346</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60af9a93-3e56-43b9-9608-ae30b51f3732')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-60af9a93-3e56-43b9-9608-ae30b51f3732 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-60af9a93-3e56-43b9-9608-ae30b51f3732');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4bbfcf79-810d-4686-945e-b76719b74cdb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4bbfcf79-810d-4686-945e-b76719b74cdb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4bbfcf79-810d-4686-945e-b76719b74cdb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ratings",
              "summary": "{\n  \"name\": \"ratings\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"user\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 266,\n        \"min\": 1,\n        \"max\": 943,\n        \"num_unique_values\": 943,\n        \"samples\": [\n          262,\n          136,\n          821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"movie\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330,\n        \"min\": 1,\n        \"max\": 1682,\n        \"num_unique_values\": 1682,\n        \"samples\": [\n          1557,\n          808,\n          1618\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g0FSMvM05KGP"
      },
      "source": [
        "Movie ids are not ideal to look at things, so we load the corresponding movie id to the title that is in the table `u.item`:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y3y_V-da5KGQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "7e2f1839-a49a-4df8-ff66-71e0b2492d28"
      },
      "source": [
        "movies = pd.read_csv(path/'u.item',  delimiter='|', encoding='latin-1',\n",
        "                     usecols=(0,1), names=('movie','title'), header=None)\n",
        "movies.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   movie              title\n",
              "0      1   Toy Story (1995)\n",
              "1      2   GoldenEye (1995)\n",
              "2      3  Four Rooms (1995)\n",
              "3      4  Get Shorty (1995)\n",
              "4      5     Copycat (1995)"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f9ab06b-cc2e-4810-bbcc-bffc1ff38c3d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movie</th>\n",
              "      <th>title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>GoldenEye (1995)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Four Rooms (1995)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Get Shorty (1995)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Copycat (1995)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f9ab06b-cc2e-4810-bbcc-bffc1ff38c3d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f9ab06b-cc2e-4810-bbcc-bffc1ff38c3d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f9ab06b-cc2e-4810-bbcc-bffc1ff38c3d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a57c6ac1-824d-4bf8-b1f8-2231782fa9d9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a57c6ac1-824d-4bf8-b1f8-2231782fa9d9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a57c6ac1-824d-4bf8-b1f8-2231782fa9d9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "movies",
              "summary": "{\n  \"name\": \"movies\",\n  \"rows\": 1682,\n  \"fields\": [\n    {\n      \"column\": \"movie\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 485,\n        \"min\": 1,\n        \"max\": 1682,\n        \"num_unique_values\": 1682,\n        \"samples\": [\n          1394,\n          744,\n          1606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1664,\n        \"samples\": [\n          \"Madame Butterfly (1995)\",\n          \"Wrong Trousers, The (1993)\",\n          \"Breaking the Waves (1996)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g11IQqmd5KGR"
      },
      "source": [
        "Next we merge it to our ratings table:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eZmPTq285KGT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "3918e51d-d1e2-498f-f826-ca9ea30216c9"
      },
      "source": [
        "ratings = ratings.merge(movies)\n",
        "ratings.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   user  movie  rating                       title\n",
              "0   196    242       3                Kolya (1996)\n",
              "1   186    302       3    L.A. Confidential (1997)\n",
              "2    22    377       1         Heavyweights (1994)\n",
              "3   244     51       2  Legends of the Fall (1994)\n",
              "4   166    346       1         Jackie Brown (1997)"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36c967c5-6ad6-4671-ab0b-3105cd7db010\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user</th>\n",
              "      <th>movie</th>\n",
              "      <th>rating</th>\n",
              "      <th>title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>196</td>\n",
              "      <td>242</td>\n",
              "      <td>3</td>\n",
              "      <td>Kolya (1996)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>186</td>\n",
              "      <td>302</td>\n",
              "      <td>3</td>\n",
              "      <td>L.A. Confidential (1997)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>22</td>\n",
              "      <td>377</td>\n",
              "      <td>1</td>\n",
              "      <td>Heavyweights (1994)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>244</td>\n",
              "      <td>51</td>\n",
              "      <td>2</td>\n",
              "      <td>Legends of the Fall (1994)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>166</td>\n",
              "      <td>346</td>\n",
              "      <td>1</td>\n",
              "      <td>Jackie Brown (1997)</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36c967c5-6ad6-4671-ab0b-3105cd7db010')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-36c967c5-6ad6-4671-ab0b-3105cd7db010 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-36c967c5-6ad6-4671-ab0b-3105cd7db010');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-01a4c31c-8067-4ae9-8ed4-39922aa773b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01a4c31c-8067-4ae9-8ed4-39922aa773b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-01a4c31c-8067-4ae9-8ed4-39922aa773b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ratings",
              "summary": "{\n  \"name\": \"ratings\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"user\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 266,\n        \"min\": 1,\n        \"max\": 943,\n        \"num_unique_values\": 943,\n        \"samples\": [\n          262,\n          136,\n          821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"movie\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330,\n        \"min\": 1,\n        \"max\": 1682,\n        \"num_unique_values\": 1682,\n        \"samples\": [\n          1557,\n          808,\n          1618\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          5,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1664,\n        \"samples\": [\n          \"House Party 3 (1994)\",\n          \"Three Colors: White (1994)\",\n          \"Fish Called Wanda, A (1988)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PksImdkw5KGV"
      },
      "source": [
        "We can then build a `DataLoaders` object from this table. By default, it takes the first column for user, the second column for the item (here our movies) and the third column for the ratings. We need to change the value of `item_name` in our case, to use the titles instead of the ids:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OV-H74uh5KGV"
      },
      "source": [
        "dls = CollabDataLoaders.from_df(ratings, item_name='title', bs=64)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nyK3Sy9L5KGW"
      },
      "source": [
        "In all applications, when the data has been assembled in a `DataLoaders`, you can have a look at it with the `show_batch` method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U07N7Tue5KGW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "outputId": "d7604802-19f9-4b03-e794-facdd3717be2"
      },
      "source": [
        "dls.show_batch()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user</th>\n",
              "      <th>title</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>416</td>\n",
              "      <td>Ghost and the Darkness, The (1996)</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>850</td>\n",
              "      <td>Speed (1994)</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>244</td>\n",
              "      <td>Up in Smoke (1978)</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>486</td>\n",
              "      <td>Shall We Dance? (1996)</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>158</td>\n",
              "      <td>Getaway, The (1994)</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7</td>\n",
              "      <td>Blown Away (1994)</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>478</td>\n",
              "      <td>Jerry Maguire (1996)</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>311</td>\n",
              "      <td>Cat on a Hot Tin Roof (1958)</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>210</td>\n",
              "      <td>Full Metal Jacket (1987)</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>862</td>\n",
              "      <td>Fantasia (1940)</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cMiAsrvW5KGY"
      },
      "source": [
        "fastai can create and train a collaborative filtering model by using `collab_learner`:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0rXePHqS5KGY"
      },
      "source": [
        "learn = collab_learner(dls, n_factors=50, y_range=(0, 5.5))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "58blYToq5KGY"
      },
      "source": [
        "It uses a simple dot product model with 50 latent factors. To train it using the 1cycle policy, we just run this command:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ze2sG7Pd5KGZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "145955ad-af7d-406f-9c56-5512374fbb83"
      },
      "source": [
        "learn.fit_one_cycle(5, 5e-3, wd=0.1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
              "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>0.895712</td>\n",
              "      <td>0.957291</td>\n",
              "      <td>00:08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.698294</td>\n",
              "      <td>0.920346</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.515882</td>\n",
              "      <td>0.890068</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.447841</td>\n",
              "      <td>0.874847</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.437024</td>\n",
              "      <td>0.871010</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uXpc4wrh5KGZ"
      },
      "source": [
        "Here's [some benchmarks](https://www.librec.net/release/v1.3/example.html) on the same dataset for the popular Librec system for collaborative filtering. They show best results based on RMSE of 0.91 (scroll down to the 100k dataset), which corresponds to an MSE of `0.91**2 = 0.83`. So in less than a minute, we got pretty good results!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GNlR8PdV5KGa"
      },
      "source": [
        "### Interpretation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Kp8v39y5KGa"
      },
      "source": [
        "Let's analyze the results of our previous model. We will keep the 1000 most rated movies for this:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dOBM1Dmn5KGa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14f5772c-d4e8-4100-fcdb-d3a612b99f72"
      },
      "source": [
        "g = ratings.groupby('title')['rating'].count()\n",
        "top_movies = g.sort_values(ascending=False).index.values[:1000]\n",
        "top_movies[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Star Wars (1977)', 'Contact (1997)', 'Fargo (1996)',\n",
              "       'Return of the Jedi (1983)', 'Liar Liar (1997)',\n",
              "       'English Patient, The (1996)', 'Scream (1996)', 'Toy Story (1995)',\n",
              "       'Air Force One (1997)', 'Independence Day (ID4) (1996)'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iT0TUZeV5KGa"
      },
      "source": [
        "### Movie bias"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QTfd24Ce5KGb"
      },
      "source": [
        "Our model has learned one bias per movie, a unique number independent of users that can be interpreted as the intrinsic \"value\" of the movie. We can grab the bias of each movie in our `top_movies` list with the following command:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q6_3vygf5KGb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42a8ae67-798e-4743-ed97-dd7aa34cb6c4"
      },
      "source": [
        "movie_bias = learn.model.bias(top_movies, is_item=True)\n",
        "movie_bias.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1000])"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4LWSBSXB5KGb"
      },
      "source": [
        "Let's compare those biases with the average ratings:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b-cmUxrz5KGc"
      },
      "source": [
        "mean_ratings = ratings.groupby('title')['rating'].mean()\n",
        "movie_ratings = [(b, i, mean_ratings.loc[i]) for i,b in zip(top_movies,movie_bias)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nQ9NpRIY5KGd"
      },
      "source": [
        "Now let's have a look at the movies with the worst bias:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sPK_3uoL5KGe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e564fbb-11e7-4ecf-db2b-ba62466bbc82"
      },
      "source": [
        "item0 = lambda o:o[0]\n",
        "sorted(movie_ratings, key=item0)[:15]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(-0.3896),\n",
              "  'Children of the Corn: The Gathering (1996)',\n",
              "  1.3157894736842106),\n",
              " (tensor(-0.3693), 'Mortal Kombat: Annihilation (1997)', 1.9534883720930232),\n",
              " (tensor(-0.2990), 'Free Willy 3: The Rescue (1997)', 1.7407407407407407),\n",
              " (tensor(-0.2905), 'Leave It to Beaver (1997)', 1.8409090909090908),\n",
              " (tensor(-0.2881), 'Cable Guy, The (1996)', 2.339622641509434),\n",
              " (tensor(-0.2863), 'Bio-Dome (1996)', 1.903225806451613),\n",
              " (tensor(-0.2816), 'Hellraiser: Bloodline (1996)', 2.0),\n",
              " (tensor(-0.2659), 'Beautician and the Beast, The (1997)', 2.313953488372093),\n",
              " (tensor(-0.2487), 'Crow: City of Angels, The (1996)', 1.9487179487179487),\n",
              " (tensor(-0.2443), 'Eddie (1996)', 2.7),\n",
              " (tensor(-0.2430), 'Island of Dr. Moreau, The (1996)', 2.1578947368421053),\n",
              " (tensor(-0.2374), 'Thinner (1996)', 2.4489795918367347),\n",
              " (tensor(-0.2349), 'Home Alone 3 (1997)', 1.894736842105263),\n",
              " (tensor(-0.2338), 'Halloween: The Curse of Michael Myers (1995)', 2.2),\n",
              " (tensor(-0.2304),\n",
              "  'Lawnmower Man 2: Beyond Cyberspace (1996)',\n",
              "  1.7142857142857142)]"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hyZduCwf5KGf"
      },
      "source": [
        "Or the ones with the best bias:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "la5TBDHx5KGg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fcca838-cf64-4c25-b707-6cdba2b40495"
      },
      "source": [
        "sorted(movie_ratings, key=lambda o: o[0], reverse=True)[:15]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(0.5935), 'Silence of the Lambs, The (1991)', 4.28974358974359),\n",
              " (tensor(0.5763), \"Schindler's List (1993)\", 4.466442953020135),\n",
              " (tensor(0.5694), 'Titanic (1997)', 4.2457142857142856),\n",
              " (tensor(0.5595), 'As Good As It Gets (1997)', 4.196428571428571),\n",
              " (tensor(0.5361), 'L.A. Confidential (1997)', 4.161616161616162),\n",
              " (tensor(0.5356), 'Shawshank Redemption, The (1994)', 4.445229681978798),\n",
              " (tensor(0.5280), 'Rear Window (1954)', 4.3875598086124405),\n",
              " (tensor(0.5181), 'Casablanca (1942)', 4.45679012345679),\n",
              " (tensor(0.5129), 'Good Will Hunting (1997)', 4.262626262626263),\n",
              " (tensor(0.4982), \"One Flew Over the Cuckoo's Nest (1975)\", 4.291666666666667),\n",
              " (tensor(0.4868), 'Star Wars (1977)', 4.3584905660377355),\n",
              " (tensor(0.4675), 'Apt Pupil (1998)', 4.1),\n",
              " (tensor(0.4512), 'Vertigo (1958)', 4.251396648044692),\n",
              " (tensor(0.4488), 'Fargo (1996)', 4.155511811023622),\n",
              " (tensor(0.4351), 'Return of the Jedi (1983)', 4.007889546351085)]"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6evHscZk5KGh"
      },
      "source": [
        "There is certainly a strong correlation!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_eVUbKjL5KGi"
      },
      "source": [
        "### Movie weights"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rfpKAgSC5KGi"
      },
      "source": [
        "Now let's try to analyze the latent factors our model has learned. We can grab the weights for each movie in `top_movies` the same way as we did for the bias before."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "deDn2gcH5KGj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcc593a8-b7e9-4612-c159-6646c5381a3b"
      },
      "source": [
        "movie_w = learn.model.weight(top_movies, is_item=True)\n",
        "movie_w.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1000, 50])"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NMKR-0Um5KGj"
      },
      "source": [
        "Let's try a PCA to reduce the dimensions and see if we can see what the model learned:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7eaYCuVt5KGk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3024354d-44f5-4020-ce75-2d08a1fb4267"
      },
      "source": [
        "movie_pca = movie_w.pca(3)\n",
        "movie_pca.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1000, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gP8YQMM55KGl"
      },
      "source": [
        "fac0,fac1,fac2 = movie_pca.t()\n",
        "movie_comp = [(f, i) for f,i in zip(fac0, top_movies)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MRscjh3K5KGl"
      },
      "source": [
        "Here are the highest score on the first dimension:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L74WWxjA5KGl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d663e5f7-a286-49fb-f468-b43cc0a1bfb0"
      },
      "source": [
        "sorted(movie_comp, key=itemgetter(0), reverse=True)[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(1.1907), 'Chinatown (1974)'),\n",
              " (tensor(1.1136), 'Lawrence of Arabia (1962)'),\n",
              " (tensor(1.1132), 'Godfather, The (1972)'),\n",
              " (tensor(1.0690), 'Close Shave, A (1995)'),\n",
              " (tensor(1.0489), 'Casablanca (1942)'),\n",
              " (tensor(1.0105), 'Citizen Kane (1941)'),\n",
              " (tensor(0.9799), 'Top Hat (1935)'),\n",
              " (tensor(0.9798), 'Third Man, The (1949)'),\n",
              " (tensor(0.9751), 'Big Sleep, The (1946)'),\n",
              " (tensor(0.9543), 'Wrong Trousers, The (1993)')]"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMS1ASOm5KGm"
      },
      "source": [
        "And the worst:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kDxgTWUW5KGm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37909d3d-ae07-40f6-fae5-15918f4aad55"
      },
      "source": [
        "sorted(movie_comp, key=itemgetter(0))[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(-1.2177), 'Home Alone 3 (1997)'),\n",
              " (tensor(-1.1342), 'Mortal Kombat: Annihilation (1997)'),\n",
              " (tensor(-1.1156), \"McHale's Navy (1997)\"),\n",
              " (tensor(-1.1065), 'Bio-Dome (1996)'),\n",
              " (tensor(-1.1061), 'Lawnmower Man 2: Beyond Cyberspace (1996)'),\n",
              " (tensor(-1.0988), 'Children of the Corn: The Gathering (1996)'),\n",
              " (tensor(-1.0771), 'Leave It to Beaver (1997)'),\n",
              " (tensor(-1.0390), 'Batman & Robin (1997)'),\n",
              " (tensor(-1.0275), 'Jungle2Jungle (1997)'),\n",
              " (tensor(-1.0239), 'Free Willy 3: The Rescue (1997)')]"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JXZyCaJL5KGn"
      },
      "source": [
        "Same thing for our second dimension:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0JR6BnTn5KGn"
      },
      "source": [
        "movie_comp = [(f, i) for f,i in zip(fac1, top_movies)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xj4_P5dS5KGn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "389d98f5-13ff-4957-b197-9a23c0e7c40e"
      },
      "source": [
        "sorted(movie_comp, key=itemgetter(0), reverse=True)[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(1.2300), 'Braveheart (1995)'),\n",
              " (tensor(1.1711), 'Titanic (1997)'),\n",
              " (tensor(1.1201), 'Raiders of the Lost Ark (1981)'),\n",
              " (tensor(1.0158), 'Forrest Gump (1994)'),\n",
              " (tensor(0.9767), 'Field of Dreams (1989)'),\n",
              " (tensor(0.9022), 'American President, The (1995)'),\n",
              " (tensor(0.8846), 'Independence Day (ID4) (1996)'),\n",
              " (tensor(0.8417), 'Lion King, The (1994)'),\n",
              " (tensor(0.8406), 'Sleepless in Seattle (1993)'),\n",
              " (tensor(0.8324), 'Dances with Wolves (1990)')]"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28K9s9Rp5KGo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ceea518-7cd8-4031-aa84-ee1ef2a90956"
      },
      "source": [
        "sorted(movie_comp, key=itemgetter(0))[:10]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(tensor(-0.9312), 'Spice World (1997)'),\n",
              " (tensor(-0.9136), 'Clockwork Orange, A (1971)'),\n",
              " (tensor(-0.9026), 'Crumb (1994)'),\n",
              " (tensor(-0.8814), 'Keys to Tulsa (1997)'),\n",
              " (tensor(-0.8166), 'To Die For (1995)'),\n",
              " (tensor(-0.7808), 'Brazil (1985)'),\n",
              " (tensor(-0.7498), 'Nosferatu (Nosferatu, eine Symphonie des Grauens) (1922)'),\n",
              " (tensor(-0.7470), 'Beavis and Butt-head Do America (1996)'),\n",
              " (tensor(-0.7449), 'Trainspotting (1996)'),\n",
              " (tensor(-0.7237), 'Stupids, The (1996)')]"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eZAynsWP5KGo"
      },
      "source": [
        "And we can even plot the movies according to their scores on those dimensions:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fHtORCAp5KGp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "outputId": "29698c9e-b257-48bd-a2ed-60d2af4a6084"
      },
      "source": [
        "idxs = np.random.choice(len(top_movies), 50, replace=False)\n",
        "idxs = list(range(50))\n",
        "X = fac0[idxs]\n",
        "Y = fac2[idxs]\n",
        "plt.figure(figsize=(15,15))\n",
        "plt.scatter(X, Y)\n",
        "for i, x, y in zip(top_movies[idxs], X, Y):\n",
        "    plt.text(x,y,i, color=np.random.rand(3)*0.7, fontsize=11)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NUgxT40ay8vK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 2\n",
        "\n",
        "## Play around with different collaborative filtering model parameters such as n_factors and other parameters.\n",
        "## Identify if any such parameters have impact on the speed of convergence or the performance on the model"
      ],
      "metadata": {
        "id": "y-Awr1ea7No6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# CODE"
      ],
      "metadata": {
        "id": "O8Z1SLY1zLgV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Experimenting with different collaborative filtering model parameters\n",
        "\n",
        "# List of n_factors values to try\n",
        "n_factors_values = [20, 50, 100]\n",
        "\n",
        "# Dictionary to store results\n",
        "results = {}\n",
        "\n",
        "for n_factors in n_factors_values:\n",
        "    # Create CollabDataLoaders object\n",
        "    dls = CollabDataLoaders.from_df(ratings, item_name='title', bs=64)\n",
        "\n",
        "    # Create collab_learner with different n_factors\n",
        "    learn = collab_learner(dls, n_factors=n_factors, y_range=(0, 5.5))\n",
        "\n",
        "    # Train the model\n",
        "    learn.fit_one_cycle(5, 5e-3, wd=0.1)\n",
        "\n",
        "    # Store the model and its performance\n",
        "    results[n_factors] = {'model': learn.model, 'performance': learn.recorder.values[-1][-1]}\n",
        "\n",
        "# Print results\n",
        "for n_factors, result in results.items():\n",
        "    print(f\"n_factors: {n_factors}, Performance: {result['performance']}\")"
      ],
      "metadata": {
        "id": "W4C3hMM47rb0",
        "outputId": "fff21a07-6cd5-4353-a5d1-394eb05747ed",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
              "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>0.932025</td>\n",
              "      <td>0.949381</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.782184</td>\n",
              "      <td>0.882851</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.704071</td>\n",
              "      <td>0.853509</td>\n",
              "      <td>00:06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.639015</td>\n",
              "      <td>0.834334</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.636108</td>\n",
              "      <td>0.829213</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
              "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>0.908596</td>\n",
              "      <td>0.953814</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.671656</td>\n",
              "      <td>0.892361</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.546760</td>\n",
              "      <td>0.869121</td>\n",
              "      <td>00:06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.460182</td>\n",
              "      <td>0.852017</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.441473</td>\n",
              "      <td>0.847474</td>\n",
              "      <td>00:06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "    /* Turns off some styling */\n",
              "    progress {\n",
              "        /* gets rid of default border in Firefox and Opera. */\n",
              "        border: none;\n",
              "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
              "        background-size: auto;\n",
              "    }\n",
              "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
              "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
              "    }\n",
              "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
              "        background: #F44336;\n",
              "    }\n",
              "</style>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: left;\">\n",
              "      <th>epoch</th>\n",
              "      <th>train_loss</th>\n",
              "      <th>valid_loss</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <td>0</td>\n",
              "      <td>0.857799</td>\n",
              "      <td>0.974712</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>1</td>\n",
              "      <td>0.570368</td>\n",
              "      <td>0.923477</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>2</td>\n",
              "      <td>0.391568</td>\n",
              "      <td>0.903966</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>3</td>\n",
              "      <td>0.301062</td>\n",
              "      <td>0.893695</td>\n",
              "      <td>00:07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <td>4</td>\n",
              "      <td>0.272486</td>\n",
              "      <td>0.888442</td>\n",
              "      <td>00:06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "n_factors: 20, Performance: 0.8292129039764404\n",
            "n_factors: 50, Performance: 0.8474738001823425\n",
            "n_factors: 100, Performance: 0.8884416818618774\n"
          ]
        }
      ]
    }
  ]
}